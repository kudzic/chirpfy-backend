services:
  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      kudzi:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - kudzi

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - kudzi

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - kudzi

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
          - name: Prometheus
            type: prometheus
            uid: prometheus
            url: http://prometheus:9090
            access: proxy
            orgId: 1
            basicAuth: false
            isDefault: false
            version: 1
            editable: true
            jsonData:
              httpMethod: GET
        EOF
        /run.sh
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kudzi

  backend:
    image: grafana/loki:latest
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - kudzi


  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kudzi

  userservice:
    image: kudzi/userservice:v1
    ports:
      - "8083:8083"
    container_name: "userservice-ms"
    depends_on:
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8083/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: "700m"
    networks:
     - kudzi
    environment:
      -SPRING_CONFIG_IMPORT: "configserver:http://configserver:8000/"
      -SPRING_DATA_MONGODB_URI: "mongodb://mongodb/Twitter"
      -SPRING_APPLICATION_NAME: "userservice"
      -EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka"

  chirpservice:
    image: kudzi/chirpservice:v1
    depends_on:
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 60s
    ports:
      - "8082:8082"
    container_name: "chirpservice-ms"
    deploy:
      resources:
        limits:
          memory: "700m"
    networks:
     - kudzi
    environment:
      -SPRING_CONFIG_IMPORT: "configserver:http://configserver:8000/"
      -SPRING_DATA_MONGODB_URI: "mongodb://mongodb/Twitter"
      -SPRING_APPLICATION_NAME: "chirpservice"
      -EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka"


  mongodb:
    image: mongo:6.0 # Use the desired MongoDB version
    container_name: mongodb-ms
    networks:
      - kudzi
    volumes:
      - mongodata:/data/db


  gatewayserver:
    image: kudzi/gatewayserver:v1
    ports:
      - "8084:8084"
    container_name: "gatewayserver-ms"
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      configserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: "700m"
    networks:
     - kudzi
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka"
      SPRING_APPLICATION_NAME: "gatewayserver"

  configserver:
    image: kudzi/configserver:v1
    healthcheck:
      test: "curl --fail --silent localhost:8000/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 60s
    ports:
      - "8000:8000"
    container_name: "configserver-ms"
    deploy:
      resources:
        limits:
          memory: "700m"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka"
      SPRING_APPLICATION_NAME: "configserver"
    networks:
      - kudzi

  eurekaserver:
    image: kudzi/eurekaserver:v1
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 60s
    ports:
      - "8070:8070"
    container_name: "eurekaserver-ms"
    depends_on:
      configserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: "700m"
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8000/"
      SPRING_APPLICATION_NAME: "eurekaserver"
    networks:
     - kudzi


  chirpifychat:
    image: kudzi/chirpifychat:v1
    ports:
      - "8089:8089"
    container_name: "chirpifychat-ms"
    deploy:
      resources:
        limits:
          memory: "700m"
    environment:
      -SPRING_DATA_MONGODB_URI: "mongodb://mongodb/Twitter"
    networks:
     - kudzi

volumes:
  mongodata:
    driver: local
networks:
  kudzi:
    driver: "bridge"
